#!/usr/bin/env python
import pygtk
pygtk.require('2.0')
import gtk
import os
import sys
import gobject
import gettext
import tortp
try:
    import pynotify
    pynotify.init("TorTP")
    pynotify_available = True
except:
    pynotify_available = False

gettext.textdomain('tortp-gtk')
_ = gettext.gettext


def notify(title, message):
    """
    Notification system
    """
    if pynotify_available:
        notice = pynotify.Notification(title, message, "/usr/share/pixmaps/anonymous.ico")
        notice.show()
    return

def check_if_running():
   """
   Check if TorTP-GTK is already running
   """
   if os.path.exists("/tmp/tortp-gtk.pid"):
       sys.exit(2)

def get_pid():
   """
   Get TorTP-GTK pid
   """
   p = open("/tmp/tortp-gtk.pid", "r")
   pid = p.read()
   return pid

def create_pid():
   """
   Create TorTP-GTK pidfile
   """
   pidfile = open("/tmp/tortp-gtk.pid", "w")
   pidfile.write("%s" % os.getpid()
   pidfile.close


class Icon(gtk.StatusIcon):

    def __init__(self):
        gtk.StatusIcon.__init__(self)
        self.set_from_file('/usr/share/pixmaps/anonymous.ico')
        self.connect("activate", self.load)
        self.connect("popup-menu", self.right_click_event)
        self.set_tooltip("TorTP")
        self.window = None
        self.load(None)

    def start(self):
        gtk.main()

    def stop(self):
        gtk.main_quit()

    def load(self, param):
        if self.window is None:
            self.window = MainWindow()
            self.window.connect("destroy", self.clear_window)

    def clear_window(self, widget, data=None):
        self.window = None

    def right_click_event(self, icon, button, time):
        menu = gtk.Menu()
        about = gtk.MenuItem(_("About"))
        quit = gtk.MenuItem(_("Quit"))

        about.connect("activate", self.show_about_dialog)
        quit.connect("activate", gtk.main_quit)

        menu.append(about)
        menu.append(quit)
        menu.show_all()
        menu.popup(None, None, gtk.status_icon_position_menu, button, time, self)

    def show_about_dialog(self, widget):
        about_dialog = gtk.AboutDialog()
        about_dialog.set_destroy_with_parent(True)
        about_dialog.set_name("TorTransparentProxy")
        about_dialog.set_website("https://github.com/AvANa-BBS/stem-tortp")
        about_dialog.set_version("0.2")
        about_dialog.set_authors(["vinc3nt", "paskao"])

        about_dialog.run()
        about_dialog.destroy()


class MainWindow(gtk.Window):

    def __init__(self):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.set_border_width(10)
        self.set_icon_from_file('/usr/share/pixmaps/anonymous.ico')

        box = gtk.VBox(False, 0)
        notebook = gtk.Notebook()
        box.add(notebook)
        self.add(box)

        tp = TransparentProxyBox()
        label = gtk.Label(_("Transparent Proxy"))
        notebook.append_page(tp, label)

        tpinfo = TransparentProxyInfoBox()
        tpinfo.set_scroll_adjustments(None, None)
        scroll = gtk.ScrolledWindow()
        scroll.set_policy(gtk.POLICY_NEVER, gtk.POLICY_ALWAYS)
        scroll.add_with_viewport(tpinfo)
        label_info = gtk.Label(_("Infos"))
        notebook.append_page(scroll, label_info)

        self.show_all()


class TransparentProxyInfoBox(gtk.VBox):

    def __init__(self):
        gtk.VBox.__init__(self, False, 0)
        self.liststore = gtk.ListStore(str, str, str)
        self.treeview = gtk.TreeView(model=self.liststore)
        self.add(self.treeview)
        renderer_text = gtk.CellRendererText()
        column0 = gtk.TreeViewColumn(_("Fingerprint"), renderer_text, text=0)
        self.treeview.append_column(column0)
        column1 = gtk.TreeViewColumn(_("Nickname"), renderer_text, text=1)
        self.treeview.append_column(column1)
        column2 = gtk.TreeViewColumn(_("IP address"), renderer_text, text=2)
        self.treeview.append_column(column2)
        self.load_model()

    def load_model(self):
       self.liststore.clear()
       try:
           for item in tortp.get_info():
               self.liststore.append(item)
       except SystemExit as e:
           if e.code == 1:
               notify("TorTP", _("Tor is not running"))
           else:
               notify("TorTP", _("An error occurred while getting Tor infos"))
       except:
           pass
       gobject.timeout_add_seconds(5, self.load_model)


class TransparentProxyBox(gtk.VBox):

    def __init__(self):
        gtk.VBox.__init__(self, False, 0)
        self.description_text = _("""TorTP redirect all TCP ad UDP (dns) traffic generated from your computer in a transparent way.
After TorTP starts be sure that Tor is working. """)

        self.buttons_box = gtk.HButtonBox()
        self.buttons_box.set_layout(gtk.BUTTONBOX_END)
        self.description = gtk.Label()
        self.description.set_markup(self.description_text)
        self.start_button = gtk.Button(_("Start"))
        self.change_button = gtk.Button(_("New circuit"))
        self.stop_button = gtk.Button(_("Stop"))
        self.check_button = gtk.Button(_("Check"))
        self.description.set_line_wrap(True)
        self.description.set_single_line_mode(False)

        self.start_button.connect("clicked", self.start, None)
        self.change_button.connect("clicked", self.change, None)
        self.stop_button.connect("clicked", self.stop, None)
        self.check_button.connect("clicked", self.check, None)

        # Add components
        self.buttons_box.add(self.start_button)
        self.buttons_box.add(self.change_button)
        self.buttons_box.add(self.stop_button)
        self.buttons_box.add(self.check_button)
        self.add(self.description)
        self.add(self.buttons_box)

        is_running = tortp.is_running()
        self.start_button.set_sensitive(not is_running)
        self.change_button.set_sensitive(is_running)
        self.stop_button.set_sensitive(is_running)
        self.check_button.set_sensitive(is_running)

    def start(self, widget, data=None):
        try:
            check_if_running()
            create_pid()
            tortp.do_start()
            notify("TorTP", _("Tor Transparent Proxy enabled"))
            self.start_button.set_sensitive(False)
            self.stop_button.set_sensitive(True)
            self.check_button.set_sensitive(True)
            self.change_button.set_sensitive(True)
        except SystemExit as e:
            if e.code == 1:
                notify("TorTP", _("Unable to connect to port 9051 (%s)") % e)
            elif e.code == 2:
                notify("TorTP", _("TorTP is already running with pid %s" % get_pid()))
            elif e.code == 3:
                notify("TorTP", _("Tor is not running"))
            else:
                notify("TorTP", _("An error occurred while starting TorTP"))
        except:
            notify("TorTP", _("An error occurred while starting TorTP"))

    def change(self, widget, data=None):
        try:
            tortp.tor_new()
            notify("TorTP", _("New Tor circuit created"))
        except SystemExit as e:
            if e.code == 1:
                notify("TorTP", _("Unable to connect to port 9051 (%s)") % exc)
            else:
                notify("TorTP", _("Unable to change Tor circuit"))
        except:
            notify("TorTP", _("Unable to change Tor circuit"))

    def stop(self, widget, data=None):
        try:
            tortp.do_stop()
            notify("TorTP", _("Tor Transparent Proxy disabled"))
            self.start_button.set_sensitive(True)
            self.stop_button.set_sensitive(False)
            self.check_button.set_sensitive(False)
            self.change_button.set_sensitive(False)
        except SystemExit as e:
            if e.code == 1:
                notify("TorTP", _("TorTP seems already disabled"))
            else:
                notify("TorTP", _("An error occurred while stopping TorTP"))
        except:
            notify("TorTP", _("An error occurred while stopping TorTP"))

    def check(self, widget, data=None):
        myip = None
        try:
            myip = tortp.do_check()
            notify("TorTP", _("Congratulations. TorTP is working: %s") % myip)
        except SystemExit as e:
            if e.code == 1:
                notify("TorTP", _("Sorry. TorTP is not working: %s") % myip)
            else:
                notify("TorTP", _("An error occurred while checking TorTP"))
        except:
            notify("TorTP", _("An error occurred while checking TorTP"))


if __name__ == "__main__":
    icon = Icon()
    icon.start()
